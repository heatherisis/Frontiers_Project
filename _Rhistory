sum_diff_5[i] <- sum(BL_sessions$diff[BL_sessions$Subject == i][-1])
mean_session_to_session_change_5[i] <- sum_diff_5[i]/4    #divide by total number of pairs
}
#1. Mean session-to-session change: calculate the difference for each pair of adjacent sessions (score[session N+1] - score[session N]), sum across all pairs of adjacent sessions, divided by the total number of pairs
#round(c(mean_session_to_session_change_3, mean_session_to_session_change_4, mean_session_to_session_change_5), digits=2) #1 #Answer: All <10 percentage points. Emma, Adrian & Liam stand out as highest.
#2. Identify any outliers: Points > 2 SD away from the mean across the baseline interval
high <- c(); low <- c()
for (i in data3$subject){
i <- subset(BL_sessions, Subject == i)
high <- rbind(high, subset(i, i$percent > (mean(i$percent) + 2*sd(i$percent))))
low <- rbind(low, subset(i, i$percent < (mean(i$percent) - 2*sd(i$percent))))
}
outliers <- rbind(high, low)  #2 answer:  no outliers
#3. Identify any baseline phases that end on a rising trend: last 3 datapoints show a monotonic increase with a magnitude that is greater than the baseline SD
#originally interpreted as session-session rise exceeding sd:
rising_session <- c()
for (i in data3$subject){
i <- subset(BL_sessions, Subject == i)
rising_session <- rbind(rising_session, subset(i, i$diff > i$sd))
}
#rising_session   #3a answer:  Ella & Harper showed last 3 session diff greater than sd
#does the sum of the rise in final 3 sessions exceed the sd?
rising <- c()
for (i in data3$subject){
i <- subset(BL_sessions, Subject == i)
i <- subset(i, session == tail(sort(i$session), 3)[1] | session == tail(sort(i$session), 3)[2] | session == tail(sort(i$session), 3)[3])
rising <- rbind(rising, subset(i, (max(i$percent) - min(i$percent)) > i$sd))
}
#rising  #3b:  Yes, for all participants, the max-min diff in the 3 final sessions exceeds the sd, only for Adrian and Emma does it appear to be a monotonic increase
########## end BL stability measures
#################################################################
#FIGURE 2: POSITIVE EFFECT SIZES
#################################################################
#Read in data
data <- read.csv("clean_data.csv")
#Check that variables are of correct types
#str(data)
data$subject_number <- as.factor(data$subject_number)
#Need to re-set ordered factors
data$session = ordered(data$session, levels = c("BL1","BL2","BL3","BL4","BL5","TX1","TX2","TX3","TX4","TX5","TX6","TX7","TX8","TX9","TX10",
"MP1","MP2","MP3","TX11","TX12",
"TX13","TX14","TX15","TX16","TX17","TX18","TX19","TX20","MN1","MN2","MN3"))
#change psuedonyms to pseudo-pseudonyms
data$originalpseudonym <- data$subject
data$subject <- mapvalues(data$originalpseudonym, from = c("Adrian", "Brooklyn", "Connor", "Emily",
"Emma", "Gabriel",  "Hailey", "Hannah",
"Jack", "Liam", "Madison"),
to = c("Aiden", "Bryce", "Cooper", "Erica",
"Ella", "Gregory",  "Holly", "Harper",
"Jason", "Landon", "Mason"))
#Subset to appropriate group of children
data <- droplevels(filter(data, subject=="Aiden"|subject=="Landon"|subject=="Ella"|subject=="Mason"))
data$subject = ordered(data$subject, levels= c("Aiden","Landon","Ella","Mason"))
#Specs for plotting
par(mfrow=c(4,1))
par(mar = c(4, 4, 1.5, 1.5))
par(xpd=FALSE)
#Loop through participants
Children <- levels(data$subject)
for (i in seq_along(Children)){
child <- droplevels(data[data$subject==Children[i],])
numerical=c(1:length(levels(child$session)))
minus <- length(numerical) - 2
labels = levels(child$session)
label = unique(child$subject)
BL <- droplevels(subset(child, sessiontype=="BL"))
nbl <- length(levels(BL$session))
bl1_sum <- tapply(BL$correct, BL$session, sum, na.rm=TRUE)
bl1_total <- tapply(BL$total, BL$session, sum, na.rm=TRUE)
bl1_perc <- bl1_sum*100/bl1_total
bl1_m <- mean(bl1_perc)
#Plot Treated Targets
###NB name "BF" here is a holdover from cohort 1--
###both BF AND TRAD sessions are included in these plots
#BF Pre
BF <- subset(child, child$condition=="BF"|child$condition=="PROBE")
BF_pre <- subset(BF, BF$prepost=="Pre"|BF$prepost=="PROBE")
BF_pre_mean <- tapply(BF_pre$mean, BF_pre$session, mean)
BF_pre_correct <- tapply(BF_pre$correct, BF_pre$session, sum)
BF_pre_total <- tapply(BF_pre$total, BF_pre$session, sum)
BF_pre_percent <- BF_pre_correct*100/BF_pre_total
#BF Post
BF_post <- subset(BF, BF$prepost=="Post")
BF_post_mean <- tapply(BF_post$mean, BF_post$session, mean)
BF_post_correct <- tapply(BF_post$correct, BF_post$session, sum)
BF_post_total <- tapply(BF_post$total, BF_post$session, sum)
BF_post_percent <- BF_post_correct*100/BF_post_total
plot(numerical, BF_pre_percent,
main = label,
xaxt="n", xlab = NA, ylab = NA, ylim = c(0, 100))
axis(1, at=numerical, labels=labels, cex.axis = 1.25)
mtext(side = 1, "Session", line = 2.5, cex = .75)
mtext(side = 2, expression(hat(p)), line = 2, cex = .75)
#Plot baseline mean
yline(bl1_m, lty=2)
points(numerical+.2, BF_post_percent,  pch = 8, col = "red", lty=2)
#Set points for shading BL, MP, and MN regions
endBL <- nbl + .5
beginMP <- endBL + 10
endMP <- beginMP + 3
beginMN <- endMP + 10
endMN <- beginMN + 3.6
color <- rgb(190, 190, 190, alpha=80, maxColorValue=255)
rect(xleft=0.0-1, xright=endBL, ybottom=-4, ytop=106, density=100,
col=color)
rect(xleft=beginMP, xright=endMP, ybottom=-4, ytop=106, density=100,
col=color)
rect(xleft=beginMN, xright=endMN, ybottom=-4, ytop=106, density=100,
col=color)
#Plot TRAD
#TRAD Pre
TRAD_pre <- subset(child, child$condition=="Trad"&child$prepost=="Pre")
TRAD_pre_mean <- tapply(TRAD_pre$mean, TRAD_pre$session, mean)
TRAD_pre_correct <- tapply(TRAD_pre$correct, TRAD_pre$session, sum)
TRAD_pre_total <- tapply(TRAD_pre$total, TRAD_pre$session, sum)
TRAD_pre_percent <- TRAD_pre_correct*100/TRAD_pre_total
#TRAD Post
TRAD_post <- subset(child, child$condition=="Trad"&child$prepost=="Post")
TRAD_post_mean <- tapply(TRAD_post$mean, TRAD_post$session, mean)
TRAD_post_correct <- tapply(TRAD_post$correct, TRAD_post$session, sum)
TRAD_post_total <- tapply(TRAD_post$total, TRAD_post$session, sum)
TRAD_post_percent <- TRAD_post_correct*100/TRAD_post_total
#Plot points
points(numerical, TRAD_pre_percent,  pch = 12, col = "blue", lty=2)
points(numerical+.2, TRAD_post_percent,  pch = 6, col = "green", lty=2)
#*Place a legend based on mean rating of MN sessions*
ifelse(mean(rev(BF_pre_percent)[1:3]) <= 50,
legend("topright",cex=.9, legend = c("Pre BF", "Post BF","Pre Trad", "Post Trad"),
pch = c(1,8,12,6), col=c("black","red", "blue","green"), bg = "white"),
legend("bottomright" ,cex=.9, legend = c("Pre BF", "Post BF","Pre Trad", "Post Trad"),
pch = c(1,8,12,6), col=c("black","red", "blue","green"), bg = "white"))
}
#################################################################
#FIGURE 3: SMALL POSITIVE EFFECT SIZES
#################################################################
#Read in data
data <- read.csv("clean_data.csv")
#Check that variables are of correct types
#str(data)
data$subject_number <- as.factor(data$subject_number)
#Need to re-set ordered factors
data$session = ordered(data$session, levels = c("BL1","BL2","BL3","BL4","BL5","TX1","TX2","TX3","TX4","TX5","TX6","TX7","TX8","TX9","TX10",
"MP1","MP2","MP3","TX11","TX12",
"TX13","TX14","TX15","TX16","TX17","TX18","TX19","TX20","MN1","MN2","MN3"))
#change psuedonyms to pseudo-pseudonyms
data$originalpseudonym <- data$subject
data$subject <- mapvalues(data$originalpseudonym, from = c("Adrian", "Brooklyn", "Connor", "Emily",
"Emma", "Gabriel",  "Hailey", "Hannah",
"Jack", "Liam", "Madison"),
to = c("Aiden", "Bryce", "Cooper", "Erica",
"Ella", "Gregory",  "Holly", "Harper",
"Jason", "Landon", "Mason"))
#Subset to appropriate group of children
data <- droplevels(filter(data, subject=="Erica"|subject=="Jason"|subject=="Gregory"))
data$subject = ordered(data$subject, levels= c("Erica","Gregory","Jason"))
#Specs for plotting
par(mfrow=c(4,1))
par(mar = c(4, 4, 1.5, 1.5))
par(xpd=FALSE)
#Loop through participants
Children <- levels(data$subject)
for (i in seq_along(Children)){
child <- droplevels(data[data$subject==Children[i],])
numerical=c(1:length(levels(child$session)))
minus <- length(numerical) - 2
labels = levels(child$session)
label = unique(child$subject)
BL <- droplevels(subset(child, sessiontype=="BL"))
nbl <- length(levels(BL$session))
bl1_sum <- tapply(BL$correct, BL$session, sum, na.rm=TRUE)
bl1_total <- tapply(BL$total, BL$session, sum, na.rm=TRUE)
bl1_perc <- bl1_sum*100/bl1_total
bl1_m <- mean(bl1_perc)
#Plot Treated Targets
###NB name "BF" here is a holdover from cohort 1--
###both BF AND TRAD sessions are included in these plots
#BF Pre
BF <- subset(child, child$condition=="BF"|child$condition=="PROBE")
BF_pre <- subset(BF, BF$prepost=="Pre"|BF$prepost=="PROBE")
BF_pre_mean <- tapply(BF_pre$mean, BF_pre$session, mean)
BF_pre_correct <- tapply(BF_pre$correct, BF_pre$session, sum)
BF_pre_total <- tapply(BF_pre$total, BF_pre$session, sum)
BF_pre_percent <- BF_pre_correct*100/BF_pre_total
#BF Post
BF_post <- subset(BF, BF$prepost=="Post")
BF_post_mean <- tapply(BF_post$mean, BF_post$session, mean)
BF_post_correct <- tapply(BF_post$correct, BF_post$session, sum)
BF_post_total <- tapply(BF_post$total, BF_post$session, sum)
BF_post_percent <- BF_post_correct*100/BF_post_total
plot(numerical, BF_pre_percent,
main = label,
xaxt="n", xlab = NA, ylab = NA, ylim = c(0, 100))
axis(1, at=numerical, labels=labels, cex.axis = 1.25)
mtext(side = 1, "Session", line = 2.5, cex = .75)
mtext(side = 2, expression(hat(p)), line = 2, cex = .75)
#Plot baseline mean
yline(bl1_m, lty=2)
points(numerical+.2, BF_post_percent,  pch = 8, col = "red", lty=2)
#Set points for shading BL, MP, and MN regions
endBL <- nbl + .5
beginMP <- endBL + 10
endMP <- beginMP + 3
beginMN <- endMP + 10
endMN <- beginMN + 3.6
color <- rgb(190, 190, 190, alpha=80, maxColorValue=255)
rect(xleft=0.0-1, xright=endBL, ybottom=-4, ytop=106, density=100,
col=color)
rect(xleft=beginMP, xright=endMP, ybottom=-4, ytop=106, density=100,
col=color)
rect(xleft=beginMN, xright=endMN, ybottom=-4, ytop=106, density=100,
col=color)
#Plot TRAD
#TRAD Pre
TRAD_pre <- subset(child, child$condition=="Trad"&child$prepost=="Pre")
TRAD_pre_mean <- tapply(TRAD_pre$mean, TRAD_pre$session, mean)
TRAD_pre_correct <- tapply(TRAD_pre$correct, TRAD_pre$session, sum)
TRAD_pre_total <- tapply(TRAD_pre$total, TRAD_pre$session, sum)
TRAD_pre_percent <- TRAD_pre_correct*100/TRAD_pre_total
#TRAD Post
TRAD_post <- subset(child, child$condition=="Trad"&child$prepost=="Post")
TRAD_post_mean <- tapply(TRAD_post$mean, TRAD_post$session, mean)
TRAD_post_correct <- tapply(TRAD_post$correct, TRAD_post$session, sum)
TRAD_post_total <- tapply(TRAD_post$total, TRAD_post$session, sum)
TRAD_post_percent <- TRAD_post_correct*100/TRAD_post_total
#Plot points
points(numerical, TRAD_pre_percent,  pch = 12, col = "blue", lty=2)
points(numerical+.2, TRAD_post_percent,  pch = 6, col = "green", lty=2)
#*Place a legend based on mean rating of MN sessions*
ifelse(mean(rev(BF_pre_percent)[1:3]) <= 50,
legend("topright",cex=.9, legend = c("Pre BF", "Post BF","Pre Trad", "Post Trad"),
pch = c(1,8,12,6), col=c("black","red", "blue","green"), bg = "white"),
legend("bottomright" ,cex=.9, legend = c("Pre BF", "Post BF","Pre Trad", "Post Trad"),
pch = c(1,8,12,6), col=c("black","red", "blue","green"), bg = "white"))
}
#################################################################
#FIGURE 3: NULL EFFECT SIZES
#################################################################
#Read in data
data <- read.csv("clean_data.csv")
#Check that variables are of correct types
#str(data)
data$subject_number <- as.factor(data$subject_number)
#Need to re-set ordered factors
data$session = ordered(data$session, levels = c("BL1","BL2","BL3","BL4","BL5","TX1","TX2","TX3","TX4","TX5","TX6","TX7","TX8","TX9","TX10",
"MP1","MP2","MP3","TX11","TX12",
"TX13","TX14","TX15","TX16","TX17","TX18","TX19","TX20","MN1","MN2","MN3"))
#change psuedonyms to pseudo-pseudonyms
data$originalpseudonym <- data$subject
data$subject <- mapvalues(data$originalpseudonym, from = c("Adrian", "Brooklyn", "Connor", "Emily",
"Emma", "Gabriel",  "Hailey", "Hannah",
"Jack", "Liam", "Madison"),
to = c("Aiden", "Bryce", "Cooper", "Erica",
"Ella", "Gregory",  "Holly", "Harper",
"Jason", "Landon", "Mason"))
#Subset to appropriate group of children
data <- droplevels(filter(data, subject=="Bryce"|subject=="Holly"|subject=="Cooper"|subject=="Harper"))
data$subject = ordered(data$subject, levels= c("Bryce","Holly","Harper", "Cooper"))
#Specs for plotting
par(mfrow=c(4,1))
par(mar = c(4, 4, 1.5, 1.5))
par(xpd=FALSE)
#Loop through participants
Children <- levels(data$subject)
for (i in seq_along(Children)){
child <- droplevels(data[data$subject==Children[i],])
numerical=c(1:length(levels(child$session)))
minus <- length(numerical) - 2
labels = levels(child$session)
label = unique(child$subject)
BL <- droplevels(subset(child, sessiontype=="BL"))
nbl <- length(levels(BL$session))
bl1_sum <- tapply(BL$correct, BL$session, sum, na.rm=TRUE)
bl1_total <- tapply(BL$total, BL$session, sum, na.rm=TRUE)
bl1_perc <- bl1_sum*100/bl1_total
bl1_m <- mean(bl1_perc)
#Plot Treated Targets
###NB name "BF" here is a holdover from cohort 1--
###both BF AND TRAD sessions are included in these plots
#BF Pre
BF <- subset(child, child$condition=="BF"|child$condition=="PROBE")
BF_pre <- subset(BF, BF$prepost=="Pre"|BF$prepost=="PROBE")
BF_pre_mean <- tapply(BF_pre$mean, BF_pre$session, mean)
BF_pre_correct <- tapply(BF_pre$correct, BF_pre$session, sum)
BF_pre_total <- tapply(BF_pre$total, BF_pre$session, sum)
BF_pre_percent <- BF_pre_correct*100/BF_pre_total
#BF Post
BF_post <- subset(BF, BF$prepost=="Post")
BF_post_mean <- tapply(BF_post$mean, BF_post$session, mean)
BF_post_correct <- tapply(BF_post$correct, BF_post$session, sum)
BF_post_total <- tapply(BF_post$total, BF_post$session, sum)
BF_post_percent <- BF_post_correct*100/BF_post_total
plot(numerical, BF_pre_percent,
main = label,
xaxt="n", xlab = NA, ylab = NA, ylim = c(0, 100))
axis(1, at=numerical, labels=labels, cex.axis = 1.25)
mtext(side = 1, "Session", line = 2.5, cex = .75)
mtext(side = 2, expression(hat(p)), line = 2, cex = .75)
#Plot baseline mean
yline(bl1_m, lty=2)
points(numerical+.2, BF_post_percent,  pch = 8, col = "red", lty=2)
#Set points for shading BL, MP, and MN regions
endBL <- nbl + .5
beginMP <- endBL + 10
endMP <- beginMP + 3
beginMN <- endMP + 10
endMN <- beginMN + 3.6
color <- rgb(190, 190, 190, alpha=80, maxColorValue=255)
rect(xleft=0.0-1, xright=endBL, ybottom=-4, ytop=106, density=100,
col=color)
rect(xleft=beginMP, xright=endMP, ybottom=-4, ytop=106, density=100,
col=color)
rect(xleft=beginMN, xright=endMN, ybottom=-4, ytop=106, density=100,
col=color)
#Plot TRAD
#TRAD Pre
TRAD_pre <- subset(child, child$condition=="Trad"&child$prepost=="Pre")
TRAD_pre_mean <- tapply(TRAD_pre$mean, TRAD_pre$session, mean)
TRAD_pre_correct <- tapply(TRAD_pre$correct, TRAD_pre$session, sum)
TRAD_pre_total <- tapply(TRAD_pre$total, TRAD_pre$session, sum)
TRAD_pre_percent <- TRAD_pre_correct*100/TRAD_pre_total
#TRAD Post
TRAD_post <- subset(child, child$condition=="Trad"&child$prepost=="Post")
TRAD_post_mean <- tapply(TRAD_post$mean, TRAD_post$session, mean)
TRAD_post_correct <- tapply(TRAD_post$correct, TRAD_post$session, sum)
TRAD_post_total <- tapply(TRAD_post$total, TRAD_post$session, sum)
TRAD_post_percent <- TRAD_post_correct*100/TRAD_post_total
#Plot points
points(numerical, TRAD_pre_percent,  pch = 12, col = "blue", lty=2)
points(numerical+.2, TRAD_post_percent,  pch = 6, col = "green", lty=2)
#*Place a legend based on mean rating of MN sessions*
ifelse(mean(rev(BF_pre_percent)[1:3]) <= 50,
legend("topright",cex=.9, legend = c("Pre BF", "Post BF","Pre Trad", "Post Trad"),
pch = c(1,8,12,6), col=c("black","red", "blue","green"), bg = "white"),
legend("bottomright" ,cex=.9, legend = c("Pre BF", "Post BF","Pre Trad", "Post Trad"),
pch = c(1,8,12,6), col=c("black","red", "blue","green"), bg = "white"))
}
#Read in ES data
ESdata <- data3
#str(data)
#Plots of effect sizes
#Is there a condition effect? Boxplot depicting BF phase across participants, boxplot depicting TRAD phase across participants
phasedata <- gather(ESdata,Type, ES, c(ES_TRAD, ES_BF))
phasedata$Condition <- mapvalues(phasedata$Type, from = c("ES_BF", "ES_TRAD"),
to = c("Biofeedback", "Traditional"))
p1 <- qplot(data=phasedata, x=Condition, y=ES, fill = Condition, geom="boxplot",
main = "(A) Effect Sizes by Treatment Type",
xlab = "Treatment Type", ylab = "Effect Size", show_guide = FALSE) +
scale_fill_manual(values = c("lightcoral", "cyan3"))
#boxplot(phasedata$BF_advantage)
p1 <- p1 + theme(plot.title = element_text(size = rel(1.5))) +
theme(axis.title.y = element_text(size = rel(1.5))) +
theme(axis.title.x = element_text(size = rel(1.5))) +
theme(axis.text = element_text(size = rel(1.5)))
#Is there an order effect? Boxplot depicting ES~Phase1~ across participants, boxplot depicting ES~Phase2~ across participants
#boxplot depicting difference between ES~Phase1~ and ES~Phase2~ across participants.
orderdata <- gather(ESdata,tx_Order, ES, c(ESPhase1, ESPhase2))
#head(phasedata)
orderdata$tx_Order_plot <- mapvalues(orderdata$tx_Order, from = c("ESPhase1", "ESPhase2"),
to = c("Phase 1", "Phase 2"))
p2 <- qplot(data=orderdata, x=tx_Order_plot, y=ES, fill = tx_Order_plot, geom="boxplot",
main = "(B) Effect Sizes by Phase Order",
xlab = "Treatment Order", ylab = "Effect Size", show_guide = FALSE) +
scale_fill_manual(values = c("lightcoral", "cyan3"))
#boxplot(phasedata$order_effect)
p2 <- p2 + theme(plot.title = element_text(size = rel(1.5))) +
theme(axis.title.y = element_text(size = rel(1.5))) +
theme(axis.title.x = element_text(size = rel(1.5))) +
theme(axis.text = element_text(size = rel(1.5)))
both <- gather(ESdata, tx_Order, ES, c(ESPhase1, ESPhase2))
#head(phasedata)
phasedata$tx_order_plot <- mapvalues(phasedata$tx_order, from = c("BF_TRAD", "TRAD_BF"),
to = c("BF-first", "Traditional-first"))
#phasedata <- phasedata[order(phasedata$tx_order_plot, decreasing = TRUE), ]
phasedata$tx_order_plot = ordered(phasedata$tx_order_plot, levels = c("BF-first","Traditional-first"))
p3 <- qplot(data = phasedata, x = tx_order_plot, y = ES, fill = Condition, geom = "boxplot",
main = "Effect Sizes by Condition and Treatment Order",
xlab = "Treatment Order", ylab = "Effect Size") +
scale_fill_manual(values = c("lightcoral", "cyan3"))
p2 <- qplot(data=orderdata, x=tx_Order_plot, y=ES, fill = tx_Order_plot, geom="boxplot",
main = "(B) Effect Sizes by Phase Order",
xlab = "Treatment Order", ylab = "Effect Size", show_guide = FALSE) +
scale_fill_manual(values = c("lightcoral", "cyan3"))
#boxplot(phasedata$order_effect)
p2 <- p2 + theme(plot.title = element_text(size = rel(1.5))) +
theme(axis.title.y = element_text(size = rel(1.5))) +
theme(axis.title.x = element_text(size = rel(1.5))) +
theme(axis.text = element_text(size = rel(1.5)))
p2
p3 <- qplot(data = phasedata, x = tx_order_plot, y = ES, fill = Condition, geom = "boxplot",
main = "Effect Sizes by Condition and Treatment Order",
xlab = "Treatment Order", ylab = "Effect Size") +
scale_fill_manual(values = c("lightcoral", "cyan3"))
p3
p3 + theme(plot.title = element_text(size = rel(1.5))) +
theme(axis.title.y = element_text(size = rel(1.5))) +
theme(axis.title.x = element_text(size = rel(1.5))) +
theme(legend.text = element_text(size = rel(1.5))) +
theme(legend.title = element_text(size = rel(1.5))) +
theme(axis.text = element_text(size = rel(1.5)))
p3
p3 <- qplot(data = phasedata, x = tx_order_plot, y = ES, fill = Condition, geom = "boxplot",
main = "Cohort I Effect Sizes by Condition and Treatment Order",
xlab = "Treatment Order", ylab = "Effect Size") +
scale_fill_manual(values = c("lightcoral", "cyan3"))
p3 + theme(plot.title = element_text(size = rel(1.5))) +
theme(axis.title.y = element_text(size = rel(1.5))) +
theme(axis.title.x = element_text(size = rel(1.5))) +
theme(legend.text = element_text(size = rel(1.5))) +
theme(legend.title = element_text(size = rel(1.5))) +
theme(axis.text = element_text(size = rel(1.5)))
p3
data <- read.csv("cohort2_EF_data.csv")
str(data)
#Plots of effect sizes
#Boxplots:
#Is there an order effect? Boxplot depicting ES~Phase1~ across participants, boxplot depicting ES~Phase2~ across participants
#boxplot depicting difference between ES~Phase1~ and ES~Phase2~ across participants.
phasedata <- gather(data,Order, ES, c(ESPhase1, ESPhase2))
head(phasedata)
phasedata <- gather(data,Order, ES, c(ESPhase1, ESPhase2))
library(tidyr)
phasedata <- gather(data,Order, ES, c(ESPhase1, ESPhase2))
head(phasedata)
qplot(data=phasedata, x=Order, y=ES, geom="boxplot")
boxplot(phasedata$order_effect)
#Is there a condition effect? Boxplot depicting BF phase across participants, boxplot depicting TRAD phase across participants
phasedata <- gather(data,Type, ES, c(ES_TRAD, ES_BF))
head(phasedata)
qplot(data=phasedata, x=Type, y=ES, geom="boxplot")
boxplot(phasedata$BF_advantage)
#########################
#Effect size correlations
########################
#Option to run these without Madison, who is an outlier
#hist(data$ESall)
#data <- droplevels(data[data$ESall<20,])
#Correlation between ES~All~ and age
qplot(data=data, x=age_months, y=ESall, geom="point")
cor.test(data$age_months, data$ESall, type="spearman")
#NS
#Correlation between ES~All~ and baseline accuracy (participants who start out more accurate tend to gain more)
qplot(data=data, x=bl1_m, y=ESall, geom="point")
cor.test(data$bl1_m, data$ESall, type="spearman")
#NS
#Correlation between ES~All~ and perceptual acuity?
qplot(data=data, x=ACUITY_F_PRE, y=ESall, geom="point")
cor.test(data$ACUITY_F_PRE, data$ESall, type="spearman")
#NS
#Correlation between BF_advantage and perceptual acuity?
qplot(data=data, x=ACUITY_F_PRE, y=BF_advantage, geom="point")
cor.test(data$ACUITY_F_PRE, data$ESall, type="spearman")
#NS
#Correlation between ES~All~ and duration of previous treatment?
rm(list=ls())
library(plyr)
library(modeest)
library(Hmisc)
library(data.table)
library(lme4)
#Read in unmerged data
unmergeddata <- read.csv("clean_data_unsummarized.csv")
#str(unmergeddata)
#dim(unmergeddata)
#Now fit logistic regression
#Because we will be comparing phase 1 and phase 2, use only treatment data
dataTX <- droplevels(unmergeddata[unmergeddata$condition!="PROBE",])
#dim(dataTX)
levels(dataTX$condition)
#Code by order
dataTX$phase <- 0
TRAD1 <- droplevels(subset(dataTX, tx_order=="TRAD_BF"))
TRAD1[which(TRAD1$condition=="Trad"),]$phase <- 1
TRAD1[which(TRAD1$condition=="BF"),]$phase <- 2
#head(TRAD1)
table(TRAD1$phase)
BF1 <- droplevels(subset(dataTX, tx_order=="BF_TRAD"))
BF1[which(BF1$condition=="BF"),]$phase <- 1
BF1[which(BF1$condition=="Trad"),]$phase <- 2
mydataTX <- rbind(TRAD1, BF1)
table(mydataTX$phase)
#str(mydataTX)
#This model, including an interaction between condition and raw phase order, does not converge
#mymodfull <- glmer(response ~ condition*phase + (condition|subject) + (1|Word) + (1|userCode), data=mydataTX, family="binomial")
#Substitute order of treatment application for raw phase
mymod <- glmer(response ~ condition*tx_order + (condition|subject) + (1|Word) + (1|userCode), data=mydataTX, family="binomial")
#Compare mymod to a model without random slope
mymodnorandslope <- glmer(response ~ condition*tx_order + (1|subject) + (1|Word) + (1|userCode), data=mydataTX, family="binomial")
anova(mymod, mymodnorandslope)
#Significant, use model w/ random slope
#HEATHER: Check the above result-
##HMC: mymod has a random slope at the subject level based on condition, while mymodnorandslope has a random effect at the subject level,
##the significance says that including the random slope is helpful??
#Compare mymod to a model with no interaction term
mymodnoint<- glmer(response ~ condition + tx_order + (condition|subject) + (1|Word) + (1|userCode), data=mydataTX, family="binomial")
anova(mymodnorandslope, mymodnoint)  #HMC:  updated data object to "mydataTX", having "dataTX" threw an error with anova
#Significant, include both effects and interaction
#HEATHER: Check the above result, HMC: wouldn't we want to compare mymodnoint with mymod, the one that only differs by one parameter?
anova(mymod, mymodnoint)  #Significant (barely), include interaction, in addition to random slope
summary(mymod)
#Summarize for plotting
sumdataTX <- dataTX %>%
dplyr::group_by(subject, condition, tx_order) %>%
dplyr::summarise(sum=sum(response), total=length(response))
sumdataTX$phat <- 100*(sumdataTX$sum/sumdataTX$total)
head(sumdataTX)
sumdataTX$tx_order_plot <- mapvalues(sumdataTX$tx_order, from = c("BF_TRAD", "TRAD_BF"),
to = c("Biofeedback/Traditional", "Traditional/Biofeedback"))
sumdataTX$Condition <- mapvalues(sumdataTX$condition, from = c("BF", "Trad"),
to = c("Biofeedback", "Traditional"))
p1 <- qplot(x = tx_order_plot, y = phat, fill = Condition, data = sumdataTX, geom = "boxplot",
main = expression(paste(hat(p), ' Accuracy by Treatment Order and Condition')), xlab = "Treatment Order", ylab = expression(hat(p)))
p1
